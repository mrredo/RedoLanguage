on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

name: Latest Release

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint files
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
#       - name: golangci-lint
#         uses: golangci/golangci-lint-action@v2.5.2
#         with:
#           version: latest
  test:
    name: Run tests
    runs-on: 'ubuntu-latest'
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - run: go test -v -cover
  release:
    name: Create Release
    runs-on: 'ubuntu-latest'
    needs: test
    strategy:
      matrix:
        # List of GOOS and GOARCH pairs from `go tool dist list`
        goosarch:
          # - 'darwin/amd64'
          # - 'darwin/arm64' PS: MACOS SUCKS
          - 'linux/amd64'
          - 'linux/arm64'
          - 'windows/amd64'
          - 'windows/arm64'
          - 'windows/arm'
          - 'windows/386'
          # etc
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: Get OS and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%/*}
          GOARCH=${GOOSARCH#*/}
          BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
      - name: Build
        run: |
          go build -o "$BINARY_NAME" -v
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Run read-yaml action
        id: yaml-data
        uses: KJ002/read-yaml@main      # You may wish to replace main with a version tag such as '1.6' etc.
        with:
          file: './VERSION-RELEASEBODY.yml'          # File to read from
          key-path: '["version"]' # Access the runs key then the using key and retuns the value.
      - name: Release Notes
        run: 
          git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        with:
          #automate versions like each release float gets added by 0.0.1 and when wanted +1 or +0.1
          name: ${{ env.RELEASE_VERSION || steps.yaml-data.outputs.data }} 
          tag_name: ${{ env.RELEASE_VERSION || steps.yaml-data.outputs.data }} #${{ env.RELEASE_VERSION }}  ${{ steps.yaml-data.outputs.data }}
          body_path: "RELEASE.md"
          draft: false
          files: ${{env.BINARY_NAME}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# git tag <tag_name>
# git push origin <tag_name>
